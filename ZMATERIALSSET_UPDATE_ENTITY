  method ZMATERIALSSET_UPDATE_ENTITY.
*-------------------------------------------------------------
*  Data declaration
*-------------------------------------------------------------
 DATA is_zmaterial TYPE zif_z_update_zmaterial=>zmaterial.
 DATA lv_rfc_name TYPE tfdir-funcname.
 DATA lv_destination TYPE rfcdest.
 DATA lv_subrc TYPE syst-subrc.
 DATA lv_exc_msg TYPE /iwbep/mgw_bop_rfc_excep_text.
 DATA lx_root TYPE REF TO cx_root.
 DATA ls_request_input_data TYPE zcl_zmaterial_gw_mpc=>ts_zmaterials.
 DATA ls_converted_keys LIKE er_entity.
 DATA lv_source_entity_set_name TYPE string.
 DATA lo_dp_facade TYPE REF TO /iwbep/if_mgw_dp_facade.

*-------------------------------------------------------------
*  Map the runtime request to the RFC - Only mapped attributes
*-------------------------------------------------------------
* Get all input information from the technical request context object
* Since DPC works with internal property names and runtime API interface holds external property names
* the process needs to get the all needed input information from the technical request context object
* Get request input data
 io_data_provider->read_entry_data( IMPORTING es_data = ls_request_input_data ).
* Get key table information
 io_tech_request_context->get_converted_keys(
   IMPORTING
     es_key_values  = ls_converted_keys ).

* Maps key fields to function module parameters

 is_zmaterial-matnr = ls_converted_keys-matnr.
* Map request input fields to function module parameters
 is_zmaterial-aenam = ls_request_input_data-aenam.
 is_zmaterial-laeda = ls_request_input_data-laeda.
 is_zmaterial-ernam = ls_request_input_data-ernam.
 is_zmaterial-ersda = ls_request_input_data-ersda.
 is_zmaterial-ekgrp = ls_request_input_data-ekgrp.
 is_zmaterial-spart = ls_request_input_data-spart.
 is_zmaterial-ean11 = ls_request_input_data-ean11.
 is_zmaterial-groes = ls_request_input_data-groes.
 is_zmaterial-voleh = ls_request_input_data-voleh.
 is_zmaterial-gewei = ls_request_input_data-gewei.
 is_zmaterial-matkl = ls_request_input_data-matkl.
 is_zmaterial-meins = ls_request_input_data-meins.
 is_zmaterial-maktx = ls_request_input_data-maktx.
 is_zmaterial-mtart = ls_request_input_data-mtart.

* Get RFC destination
 lo_dp_facade = /iwbep/if_mgw_conv_srv_runtime~get_dp_facade( ).
 lv_destination = /iwbep/cl_sb_gen_dpc_rt_util=>get_rfc_destination( io_dp_facade = lo_dp_facade ).

*-------------------------------------------------------------
*  Call RFC function module
*-------------------------------------------------------------
 lv_rfc_name = 'Z_UPDATE_ZMATERIAL'.

 IF lv_destination IS INITIAL OR lv_destination EQ 'NONE'.

   TRY.
       CALL FUNCTION lv_rfc_name
         EXPORTING
           is_zmaterial    = is_zmaterial
         EXCEPTIONS
           entry_not_found = 1
           update_failed   = 2
           system_failure  = 1000 message lv_exc_msg
           OTHERS          = 1002.

       lv_subrc = sy-subrc.
*in case of co-deployment the exception is raised and needs to be caught
     CATCH cx_root INTO lx_root.
       lv_subrc = 1001.
       lv_exc_msg = lx_root->if_message~get_text( ).
   ENDTRY.

 ELSE.

   CALL FUNCTION lv_rfc_name DESTINATION lv_destination
     EXPORTING
       is_zmaterial          = is_zmaterial
     EXCEPTIONS
       entry_not_found       = 1
       update_failed         = 2
       system_failure        = 1000 MESSAGE lv_exc_msg
       communication_failure = 1001 MESSAGE lv_exc_msg
       OTHERS                = 1002.

   lv_subrc = sy-subrc.

 ENDIF.

*-------------------------------------------------------------
*  Map the RFC response to the caller interface - Only mapped attributes
*-------------------------------------------------------------
*-------------------------------------------------------------
* Error and exception handling
*-------------------------------------------------------------
 IF lv_subrc <> 0.
* Execute the RFC exception handling process
   me->/iwbep/if_sb_dpc_comm_services~rfc_exception_handling(
     EXPORTING
       iv_subrc            = lv_subrc
       iv_exp_message_text = lv_exc_msg ).
 ENDIF.

* Call RFC commit work
* commenting out this commit as it will be called from changeset_End
" me->/iwbep/if_sb_dpc_comm_services~commit_work(
"        EXPORTING
"          iv_rfc_dest = lv_destination
"     ) .
  endmethod.
